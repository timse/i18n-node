// Generated by CoffeeScript 1.3.3

/*
@author      Created by Marcus Spiegel <marcus.spiegel@gmail.com> on 2011-03-25.
@link        https://github.com/mashpie/i18n-node
@license      http://creativecommons.org/licenses/by-sa/3.0/

@version     0.3.5
*/


(function() {
  var cookiename, debug, defaultLocale, directory, extension, fs, guessLanguage, i18n, locales, locate, path, read, translate, updateFiles, url, verbose, vsprintf, write;

  vsprintf = require('sprintf').vsprintf;

  fs = require('fs');

  url = require('url');

  path = require('path');

  locales = {};

  defaultLocale = 'en';

  updateFiles = true;

  cookiename = null;

  debug = false;

  verbose = false;

  extension = '.js';

  directory = './locales';

  i18n = exports;

  i18n.version = '0.3.5';

  i18n.configure = function(opt) {
    if (typeof opt.register === 'object') {
      opt.register.__ = i18n.__;
      opt.register.__n = i18n.__n;
      opt.register.getLocale = i18n.getLocale;
    }
    if (typeof opt.cookie === 'string') {
      cookiename = opt.cookie;
    }
    directory = typeof opt.directory === 'string' ? opt.directory : './locales';
    if (typeof opt.updateFiles === 'boolean') {
      updateFiles = opt.updateFiles;
    }
    if (typeof opt.extension === 'string') {
      extension = opt.extension;
    }
    if (opt.debug) {
      debug = opt.debug;
    }
    if (typeof opt.locales === 'object') {
      return Object.keys(opt.locales).forEach(function(l) {
        return read(l);
      });
    }
  };

  i18n.init = function(request, response, next) {
    if (typeof request === 'object') {
      guessLanguage(request);
    }
    if (typeof next === 'function') {
      return next();
    }
  };

  i18n.__ = function() {
    var args, count, locale, msg, slice;
    if (this.scope != null) {
      locale = this.scope.locale;
    }
    args = [locale].concat(arguments[0]);
    msg = translate.apply(this, args);
    slice = 1;
    if (Array.isArray(arguments[0])) {
      slice = 2;
      count = parseInt(arguments[1], 10);
      switch (count) {
        case 1:
          msg = vsprintf(msg.one, [count]);
          break;
        case 0:
          msg = vsprintf(msg.none || msg.other, [count]);
          break;
        default:
          msg = vsprintf(msg.other, [count]);
      }
    }
    if (arguments.length > 1) {
      return msg = vsprintf(msg, Array.prototype.slice.call(arguments, 1));
    }
  };

  i18n.setLocale = function(request, targetLocale) {
    var _ref;
    if (!((targetLocale != null) && locales[targetLocale] || locales[request])) {
      _ref = [request, void 0], targetLocale = _ref[0], request = _ref[1];
    }
    if (request != null) {
      request.locale = targetLocale;
    } else {
      defaultLocale = targetLocale;
    }
    return i18n.getLocale(request);
  };

  i18n.getLocale = function(request) {
    if (request != null) {
      return request.locale;
    } else {
      return defaultLocale;
    }
  };

  i18n.overrideLocaleFromQuery = function(req) {
    var urlObj;
    if (req == null) {
      return;
    }
    urlObj = url.parse(req.url, true);
    if (urlObj.query.locale != null) {
      if (debug) {
        console.log("Overriding locale from query: " + urlObj.query.locale);
      }
      return i18n.setLocale(req, urlObj.query.locale.toLowerCase());
    }
  };

  /*
  private methods
  guess language setting based on http headers
  */


  guessLanguage = function(request) {
    var languageHeader, languages, regions;
    if (typeof request === 'object') {
      languageHeader = request.headers['accept-language'];
      languages = [];
      regions = [];
      request.languages = [defaultLocale];
      request.regions = [defaultLocale];
      request.language = defaultLocale;
      request.region = defaultLocale;
      if (language_header) {
        language_header.split(',').forEach(function(l) {
          var header, lr;
          header = l.split(';', 1)[0];
          lr = header.split('-', 2);
          if (lr[0] != null) {
            languages.push(lr[0].toLowerCase());
          }
          if (lr[1] != null) {
            return regions.push(lr[1].toLowerCase());
          }
        });
        if (languages.length > 0) {
          request.languages = languages;
          request.language = languages[0];
        }
        if (regions.length > 0) {
          request.regions = regions;
          request.region = regions[0];
        }
      }
      if (cookiename && request.cookies[cookiename]) {
        request.language = request.cookies[cookiename];
      }
      return i18n.setLocale(request, request.language);
    }
  };

  translate = function(locale, singular, none, plural) {
    if (locale === void 0) {
      if (debug) {
        console.warn("WARN: No locale found - check the context of the call to $__. Using " + defaultLocale + " (set by request) as current locale");
      }
      locale = defaultLocale;
    }
    if (arguments.length === 3) {
      plural = none;
    }
    if (locales[locale] != null) {
      read(locale);
    }
    if (plural != null) {
      if (locales[locale][singular] == null) {
        locales[locale][singular] = {
          'none': none,
          'one': singular,
          'other': plural
        };
        write(locale);
      }
    }
    if (!!locales[locale][singular]) {
      locales[locale][singular] = singular;
      write(locale);
    }
    return locales[locale][singular];
  };

  read = function(locale) {
    var file, localeFile;
    localeFile = {};
    file = locate(locale);
    try {
      if (verbose) {
        console.log('read ' + file + ' for locale: ' + locale);
      }
      localeFile = fs.readFileSync(file);
      try {
        return locales[locale] = JSON.parse(localeFile);
      } catch (e) {
        return console.error('unable to parse locales from file (maybe ' + file + ' is empty or invalid json?): ', e);
      }
    } catch (e) {
      if (verbose) {
        console.log('initializing ' + file);
      }
      return write(locale);
    }
  };

  write = function(locale) {
    var stats, target, tmp;
    if (!updateFiles) {
      return;
    }
    try {
      stats = fs.lstatSync(directory);
    } catch (e) {
      if (debug) {
        console.log('creating locales dir in: ' + directory);
      }
      fs.mkdirSync(directory, '0755');
    }
    locales[locale] || (locales[locale] = {});
    try {
      target = locate(locale);
      tmp = target + ".tmp";
      fs.writeFileSync(tmp, JSON.stringify(locales[locale], null, "\t"), "utf8");
      if (fs.statSync(tmp).isFile()) {
        return fs.renameSync(tmp, target);
      } else {
        return console.error('unable to write locales to file (either ' + tmp + ' or ' + target + ' are not writeable?): ', e);
      }
    } catch (e) {
      return console.error('unexpected error writing files (either ' + tmp + ' or ' + target + ' are not writeable?): ', e);
    }
  };

  locate = function(locale) {
    return path.normalize("" + directory + "/" + locale + (extension || ".js"));
  };

}).call(this);
